// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(290)
  main_image  String
  description String?
  images      String[]
  open_time   String
  close_time  String
  slug        String     @unique
  price       PRICE
  items       MenuItem[]
  reviews     Review[]
  bookings    Booking[]
  tables      Table[]
  location_id Int
  location    Location   @relation(fields: [location_id], references: [id])
  cuisine_id  Int
  cuisine     Cuisine    @relation(fields: [cuisine_id], references: [id])
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}

model MenuItem {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(250)
  description   String
  price         String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(250)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  restaurants Restaurant[]
}

model Cuisine {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(250)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  restaurants Restaurant[]
}

model Review {
  id            Int        @id @default(autoincrement())
  first_name    String     @db.VarChar(250)
  last_name     String     @db.VarChar(250)
  text          String
  rating        Float
  restaurant_id Int
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  user_id       Int
  user          User       @relation(fields: [user_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String   @db.VarChar(250)
  last_name  String   @db.VarChar(250)
  city       String
  email      String   @unique
  phone      String
  password   String
  reviews    Review[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Booking {
  id               Int               @id @default(autoincrement())
  number_of_people Int
  booking_time     DateTime
  booker_firstname String
  booker_lastname  String
  booker_email     String
  booker_phone     String
  booker_occasion  String?
  booker_request   String?
  restaurant_id    Int
  restaurant       Restaurant        @relation(fields: [restaurant_id], references: [id])
  tables           BookingsOnTable[]
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
}

model Table {
  id            Int               @id @default(autoincrement())
  seats         Int
  restaurant_id Int
  restaurant    Restaurant        @relation(fields: [restaurant_id], references: [id])
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt
  bookings      BookingsOnTable[]
}

// many to many
model BookingsOnTable {
  booking_id Int
  booking    Booking  @relation(fields: [booking_id], references: [id])
  table_id   Int
  table      Table    @relation(fields: [table_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([booking_id, table_id])
}
